/*
 * Generated by ASN.1 Java Compiler (http://www.asnlab.org/)
 * From ASN.1 module "DistributedFeatureExtraction"
 */
package DistributedFeatureExtraction;

import java.io.*;
import java.math.*;
import java.util.Vector;
import org.asnlab.asndt.runtime.conv.*;
import org.asnlab.asndt.runtime.conv.annotation.*;
import org.asnlab.asndt.runtime.type.AsnType;
import org.asnlab.asndt.runtime.value.BitString;

public class ImgTaskAsn {

	@Component(0)
	public Long taskid;

	@Component(1)
	public Long imgid;

	@Component(2)
	public BitString kpexecuter;

	@Component(3)
	public BitString dexecuter;

	@Component(4)
	public Boolean keypoints_detected;

	@Component(5)
	public Boolean descriptors_extracted;

	@Component(6)
	public RectAsn rect;

	@Component(7)
	public AlgorithmParametersAsn parameters;

	@Component(8)
	public Vector<KeyPointAsn> keypoints;

	@Component(9)
	public MatAsn descriptors;


	public boolean equals(Object obj) {
		if(!(obj instanceof ImgTaskAsn)){
			return false;
		}
		return TYPE.equals(this, obj, CONVERTER);
	}

	public void print(PrintStream out) {
		TYPE.print(this, CONVERTER, out);
	}

	public void der_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONVERTER, out);
	}

	public static ImgTaskAsn der_decode(InputStream in) throws IOException {
		return (ImgTaskAsn)TYPE.decode(in, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONVERTER);
	}


	public final static AsnType TYPE = DistributedFeatureExtraction.type(65548);

	public final static CompositeConverter CONVERTER;

	static {
		CONVERTER = new AnnotationCompositeConverter(ImgTaskAsn.class);
		AsnConverter taskidConverter = LongConverter.INSTANCE;
		AsnConverter imgidConverter = LongConverter.INSTANCE;
		AsnConverter kpexecuterConverter = BitStringConverter.INSTANCE;
		AsnConverter dexecuterConverter = BitStringConverter.INSTANCE;
		AsnConverter keypoints_detectedConverter = BooleanConverter.INSTANCE;
		AsnConverter descriptors_extractedConverter = BooleanConverter.INSTANCE;
		AsnConverter rectConverter = RectAsn.CONVERTER;
		AsnConverter parametersConverter = AlgorithmParametersAsn.CONVERTER;
		//AsnConverter keypointsConverter = new ListConverter(KeyPointAsn.CONVERTER);
		AsnConverter descriptorsConverter = MatAsn.CONVERTER;
		//CONVERTER.setComponentConverters(new AsnConverter[] { taskidConverter, imgidConverter, kpexecuterConverter, dexecuterConverter, keypoints_detectedConverter, descriptors_extractedConverter, rectConverter, parametersConverter, keypointsConverter, descriptorsConverter });
	}


}
