/*
 * Generated by ASN.1 Java Compiler (http://www.asnlab.org/)
 * From ASN.1 module "DistributedFeatureExtraction"
 */
package DistributedFeatureExtraction;

import java.io.*;
import org.asnlab.asndt.runtime.conv.*;
import org.asnlab.asndt.runtime.conv.annotation.*;
import org.asnlab.asndt.runtime.type.AsnType;

public class ParametersAsn {

	public static final int surfparametersChosen = 0;

	public final int choiceID;

	@Alternative(0)
	public final SurfParametersAsn surfparameters;


	private ParametersAsn(int choiceID, SurfParametersAsn surfparameters) {
		this.choiceID = choiceID;
		this.surfparameters = surfparameters;
	}

	public static ParametersAsn surfparameters(SurfParametersAsn surfparameters) {
		return new ParametersAsn(surfparametersChosen, surfparameters);
	}

	public boolean equals(Object obj) {
		if(!(obj instanceof ParametersAsn)){
			return false;
		}
		return TYPE.equals(this, obj, CONVERTER);
	}

	public void print(PrintStream out) {
		TYPE.print(this, CONVERTER, out);
	}

	public void der_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONVERTER, out);
	}

	public static ParametersAsn der_decode(InputStream in) throws IOException {
		return (ParametersAsn)TYPE.decode(in, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONVERTER);
	}


	public final static AsnType TYPE = DistributedFeatureExtraction.type(65537);

	public final static ChoiceConverter CONVERTER;

	static {
		CONVERTER = new AnnotationChoiceConverter(ParametersAsn.class);
		AsnConverter surfparametersConverter = SurfParametersAsn.CONVERTER;
		CONVERTER.setAlternativeConverters(new AsnConverter[] { surfparametersConverter });
	}


}
