/*
 * Generated by ASN.1 Java Compiler (http://www.asnlab.org/)
 * From ASN.1 module "DistributedFeatureExtraction"
 */
package DistributedFeatureExtraction;

import java.io.*;
import java.math.*;
import org.asnlab.asndt.runtime.conv.*;
import org.asnlab.asndt.runtime.conv.annotation.*;
import org.asnlab.asndt.runtime.type.AsnType;

public class RectAsn {

	@Component(0)
	public Long x;

	@Component(1)
	public Long y;

	@Component(2)
	public Long width;

	@Component(3)
	public Long height;


	public boolean equals(Object obj) {
		if(!(obj instanceof RectAsn)){
			return false;
		}
		return TYPE.equals(this, obj, CONVERTER);
	}

	public void print(PrintStream out) {
		TYPE.print(this, CONVERTER, out);
	}

	public void der_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONVERTER, out);
	}

	public static RectAsn der_decode(InputStream in) throws IOException {
		return (RectAsn)TYPE.decode(in, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONVERTER);
	}


	public final static AsnType TYPE = DistributedFeatureExtraction.type(65541);

	public final static CompositeConverter CONVERTER;

	static {
		CONVERTER = new AnnotationCompositeConverter(RectAsn.class);
		AsnConverter xConverter = LongConverter.INSTANCE;
		AsnConverter yConverter = LongConverter.INSTANCE;
		AsnConverter widthConverter = LongConverter.INSTANCE;
		AsnConverter heightConverter = LongConverter.INSTANCE;
		CONVERTER.setComponentConverters(new AsnConverter[] { xConverter, yConverter, widthConverter, heightConverter });
	}


}
