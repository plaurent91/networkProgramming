/*
 * Generated by ASN.1 Java Compiler (http://www.asnlab.org/)
 * From ASN.1 module "DistributedFeatureExtraction"
 */
package DistributedFeatureExtraction;

import java.io.*;
import org.asnlab.asndt.runtime.conv.*;
import org.asnlab.asndt.runtime.conv.annotation.*;
import org.asnlab.asndt.runtime.type.AsnType;

public class TakePicture {
	public static final TakePicture takepicture = new TakePicture(0, 0);

	private static TakePicture[] values = new TakePicture[] { takepicture };

	public static TakePicture valueOf(int value){
		for(int i=0;i<values.length;i++){
			if(values[i].value==value){
				return values[i];
			}
		}
		 throw new IllegalArgumentException("No enum const value for " + value);
	}


	private int ordinal;
	private int value;

	private TakePicture(int ordinal, int value) {
		this.ordinal=ordinal;
		this.value = value;
	}

	public final int ordinal(){
		return ordinal;
	}

	public final int value(){
		return value;
	}

	public static TakePicture[] values() {
		return values;
	}

	public String toString() {
		if(this==takepicture){
			return "takepicture";
		}
		return "";
	}

	public boolean equals(Object obj) {
		if(!(obj instanceof TakePicture)){
			return false;
		}
		return TYPE.equals(this, obj, CONVERTER);
	}

	public void print(PrintStream out) {
		TYPE.print(this, CONVERTER, out);
	}

	public void der_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONVERTER, out);
	}

	public static TakePicture der_decode(InputStream in) throws IOException {
		return (TakePicture)TYPE.decode(in, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONVERTER);
	}


	public final static AsnType TYPE = DistributedFeatureExtraction.type(65546);

	public final static AsnConverter CONVERTER;

	static {
		CONVERTER = new ReflectionEnumeratedConverter(TakePicture.class);
	}


}
