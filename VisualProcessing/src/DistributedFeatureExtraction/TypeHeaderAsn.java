/*
 * Generated by ASN.1 Java Compiler (http://www.asnlab.org/)
 * From ASN.1 module "DistributedFeatureExtraction"
 */
package DistributedFeatureExtraction;

import java.io.*;
import org.asnlab.asndt.runtime.conv.*;
import org.asnlab.asndt.runtime.conv.annotation.*;
import org.asnlab.asndt.runtime.type.AsnType;

public class TypeHeaderAsn {

	public static final int imageasnChosen = 0;
	public static final int imgtaskChosen = 1;
	public static final int taskfinishedasnChosen = 2;
	public static final int reportnewnodeasnChosen = 3;
	public static final int deletenodeasnChosen = 4;
	public static final int takepictureChosen = 5;

	public final int choiceID;

	@Alternative(0)
	public final ImageAsn imageasn;

	@Alternative(1)
	public final ImgTaskAsn imgtask;

	@Alternative(2)
	public final TaskFinishedAsn taskfinishedasn;

	@Alternative(3)
	public final ReportNewNodeAsn reportnewnodeasn;

	@Alternative(4)
	public final DeleteNodeAsn deletenodeasn;

	@Alternative(5)
	public final TakePicture takepicture;


	private TypeHeaderAsn(int choiceID, ImageAsn imageasn, ImgTaskAsn imgtask, TaskFinishedAsn taskfinishedasn, ReportNewNodeAsn reportnewnodeasn, DeleteNodeAsn deletenodeasn, TakePicture takepicture) {
		this.choiceID = choiceID;
		this.imageasn = imageasn;
		this.imgtask = imgtask;
		this.taskfinishedasn = taskfinishedasn;
		this.reportnewnodeasn = reportnewnodeasn;
		this.deletenodeasn = deletenodeasn;
		this.takepicture = takepicture;
	}

	public static TypeHeaderAsn imageasn(ImageAsn imageasn) {
		return new TypeHeaderAsn(imageasnChosen, imageasn, null, null, null, null, null);
	}

	public static TypeHeaderAsn imgtask(ImgTaskAsn imgtask) {
		return new TypeHeaderAsn(imgtaskChosen, null, imgtask, null, null, null, null);
	}

	public static TypeHeaderAsn taskfinishedasn(TaskFinishedAsn taskfinishedasn) {
		return new TypeHeaderAsn(taskfinishedasnChosen, null, null, taskfinishedasn, null, null, null);
	}

	public static TypeHeaderAsn reportnewnodeasn(ReportNewNodeAsn reportnewnodeasn) {
		return new TypeHeaderAsn(reportnewnodeasnChosen, null, null, null, reportnewnodeasn, null, null);
	}

	public static TypeHeaderAsn deletenodeasn(DeleteNodeAsn deletenodeasn) {
		return new TypeHeaderAsn(deletenodeasnChosen, null, null, null, null, deletenodeasn, null);
	}

	public static TypeHeaderAsn takepicture(TakePicture takepicture) {
		return new TypeHeaderAsn(takepictureChosen, null, null, null, null, null, takepicture);
	}

	public boolean equals(Object obj) {
		if(!(obj instanceof TypeHeaderAsn)){
			return false;
		}
		return TYPE.equals(this, obj, CONVERTER);
	}

	public void print(PrintStream out) {
		TYPE.print(this, CONVERTER, out);
	}

	public void der_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONVERTER, out);
	}

	public static TypeHeaderAsn der_decode(InputStream in) throws IOException {
		return (TypeHeaderAsn)TYPE.decode(in, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONVERTER);
	}


	public final static AsnType TYPE = DistributedFeatureExtraction.type(65553);

	public final static ChoiceConverter CONVERTER;

	static {
		CONVERTER = new AnnotationChoiceConverter(TypeHeaderAsn.class);
		AsnConverter imageasnConverter = ImageAsn.CONVERTER;
		AsnConverter imgtaskConverter = ImgTaskAsn.CONVERTER;
		AsnConverter taskfinishedasnConverter = TaskFinishedAsn.CONVERTER;
		AsnConverter reportnewnodeasnConverter = ReportNewNodeAsn.CONVERTER;
		AsnConverter deletenodeasnConverter = DeleteNodeAsn.CONVERTER;
		AsnConverter takepictureConverter = TakePicture.CONVERTER;
		CONVERTER.setAlternativeConverters(new AsnConverter[] { imageasnConverter, imgtaskConverter, taskfinishedasnConverter, reportnewnodeasnConverter, deletenodeasnConverter, takepictureConverter });
	}


}
